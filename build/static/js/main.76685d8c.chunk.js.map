{"version":3,"sources":["EventsList/EventList.js","TimelineUnitList/TimeUnitList.js","Timeline/Timeline.js","API/Queries.js","App.js","API/Fetch.js","serviceWorker.js","index.js","Timeline/Timeline.module.scss","EventsList/EventList.module.scss","TimelineUnitList/TimeUnitList.module.scss"],"names":["dayjs","extend","advancedFormat","relativeTime","EventList","events","dayZero","className","styles","map","event","heading","details","date","id","_id","dateObj","key","event__heading","event__meta","format","from","TimeUnitList","getMonthName","month","eventsSorted","grouppedEventsObj","reduce","groups","split","year","yearMonth","push","grouppedEventsArr","group","label","sortEvents","time_units","unit","time_unit","uuidv4","time_unit__label","Timeline","tm","tm__line","fetchAllQuery","App","query","useState","setEvents","loading","setLoading","useEffect","client","sanityClient","projectId","dataset","a","fetch","response","console","dir","fetchEvents","useEvents","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.76685d8c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport dayjs from 'dayjs';\nimport advancedFormat from 'dayjs/plugin/advancedFormat';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport styles from './EventList.module.scss';\ndayjs.extend(advancedFormat);\ndayjs.extend(relativeTime);\n\n// @todo change the way to display details as formatted text @see https://www.sanity.io/docs/block-content\n// @todo add author to meta data\n// @todo add source link to meta data\nfunction EventList({events, dayZero}) {\n    return (\n        <ul className={styles.events}>\n            {\n                events.map( event => {\n                    const {heading, details, date, _id: id} = event;\n                    const dateObj = dayjs(date);\n                    return (\n                        <li className={styles.event} key={id}>\n                            <h2 className={styles.event__heading}>{ heading }</h2>\n                            <div className={styles.event__meta}>{dateObj.format(`MMMM Do, YYYY`)} <p>{date === dayZero ? `Day 0` : `~${dateObj.from(dayZero, true)} since day\\u00A00`}</p></div>\n                            {!!details && details}\n                        </li>\n                    );\n                })\n            }\n        </ul>\n    );\n}\nEventList.propTypes = {\n    events: PropTypes.arrayOf(\n        PropTypes.shape({\n            _id: PropTypes.string.isRequired,\n            date: PropTypes.string.isRequired,\n            heading: PropTypes.string.isRequired,\n            details: PropTypes.string,\n        })\n    ).isRequired,\n    dayZero: PropTypes.string.isRequired\n};\n\nexport default EventList;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport EventsList from '../EventsList/EventList';\nimport styles from './TimeUnitList.module.scss';\n\nfunction TimeUnitList({events}) {\n\n    // @todo add test for the sortEvents()\n    function sortEvents(events) {\n        const grouppedEventsObj = events.reduce( (groups, event) => {\n            const date = event.date.split('T')[0];\n            const year = date.split('-')[0];\n            const month = date.split('-')[1];\n            const yearMonth = `${year}-${month}`;\n    \n            if( !groups[yearMonth] ) {\n                groups[yearMonth] = [];\n            }\n            groups[yearMonth].push(event);\n    \n            return groups;\n        }, {});\n    \n        const grouppedEventsArr = [];\n        for ( const yearMonth in grouppedEventsObj ) {\n            const date = yearMonth.split(`-`);\n            const label = {\n                month: getMonthName(date[1]),\n                year: date[0]\n            }\n            const group = {\n                label,\n                events: grouppedEventsObj[yearMonth]\n            };\n            grouppedEventsArr.push(group);\n        }\n        return grouppedEventsArr;\n    }\n\n    // @todo add test for the getMonthName() - probably goodone to start with\n    function getMonthName(month) {\n        const monthsOfYear = [\n            `January`,\n            `February`,\n            `March`,\n            `April`,\n            `May`,\n            `June`,\n            `July`,\n            `August`,\n            `September`,\n            `October`,\n            `November`,\n            `December`\n        ];\n        return `${monthsOfYear[month-1]}`;\n    }\n\n    const eventsSorted = sortEvents( events );\n    const dayZero = eventsSorted[0].events[0].date;\n\n    return (\n        <ul className={styles.time_units}>\n            {                \n                eventsSorted.map( unit => {\n                    const {label, events} = unit;\n                    return (\n                        <li className={styles.time_unit} key={uuidv4()}>\n                            <div className={styles.time_unit__label}>{ label.month }<span>{ label.year }</span></div>\n                            <EventsList events={ events } dayZero={dayZero} />\n                        </li>\n                    );\n                })\n            }\n        </ul>\n    );\n}\nTimeUnitList.propTypes = {\n    events: PropTypes.arrayOf(\n        PropTypes.shape({\n          _id: PropTypes.string.isRequired,\n          date: PropTypes.string.isRequired,\n          heading: PropTypes.string.isRequired,\n          details: PropTypes.string,\n        })\n      ).isRequired\n};\n\nexport default TimeUnitList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TimeUnitList from '../TimelineUnitList/TimeUnitList';\nimport styles from './Timeline.module.scss';\n\nfunction Timeline({ events }) {\n  return (\n    <div className={styles.tm}>\n      <div className={styles.tm__line}></div>\n      <TimeUnitList events={ events } />\n    </div>\n  );\n}\nTimeline.propTypes = {\n  events: PropTypes.arrayOf(\n    PropTypes.shape({\n      _id: PropTypes.string.isRequired,\n      date: PropTypes.string.isRequired,\n      heading: PropTypes.string.isRequired,\n      details: PropTypes.string,\n    })\n  ).isRequired\n};\n\nexport default Timeline;","// @todo add details to the query\nexport const fetchAllQuery = `* [ _type == 'event' ] | order(date asc, heading) {\n  _id,\n  heading,\n  date,\n  source,\n  \"authorName\":author->name\n}`;","import React from 'react';\nimport Timeline from './Timeline/Timeline';\nimport { useEvents } from './API/Fetch';\nimport './App.scss';\n\nfunction App() {\n  const [events, loading] = useEvents();\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1>Hello!!!</h1>\n        Is this the real life, is this the fantasy?\n        {/* @todo Loading spinner */}\n        { loading ? (`Loading`) : (\n          <Timeline events={events} />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { useState, useEffect } from 'react';\nimport sanityClient from '@sanity/client';\nimport { fetchAllQuery } from './Queries';\n\nfunction useEvents(query = fetchAllQuery) {\n    const [events, setEvents] = useState([]);\n    const [loading, setLoading] = useState(true);\n    \n    useEffect( () => {\n\n        const client = sanityClient({\n            projectId: `he2py649`,\n            dataset:   `production`,\n        });\n\n        async function fetchEvents() {\n            const response = await client.fetch( query )\n            console.dir(response);\n            // const json = await response.json();\n            // console.dir(json);\n    \n            setEvents(response);\n            setLoading(false);\n        }\n\n        fetchEvents();\n    }, [query]);\n\n    return [events, loading];\n}\nexport { useEvents };","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tm\":\"Timeline_tm__W29v7\",\"tm__line\":\"Timeline_tm__line__GIT3U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"events\":\"EventList_events__3mZcH\",\"event\":\"EventList_event__dA5CI\",\"microEvent\":\"EventList_microEvent__2Jugq\",\"event__heading\":\"EventList_event__heading__39BsR\",\"event__meta\":\"EventList_event__meta__1dxJN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"time_units\":\"TimeUnitList_time_units__3tjrY\",\"time_unit\":\"TimeUnitList_time_unit__38ttW\",\"time_unit__label\":\"TimeUnitList_time_unit__label__2cmiX\"};"],"sourceRoot":""}