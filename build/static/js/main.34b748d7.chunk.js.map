{"version":3,"sources":["TimelineUnitList/TimeUnitList.module.scss","App.module.scss","sanityClient.js","SourceList/SourceList.js","EventsList/EventList.js","TimelineUnitList/TimeUnitList.js","Timeline/Timeline.js","API/Queries.js","App.js","API/Fetch.js","serviceWorker.js","index.js","SourceList/SourceList.module.scss","Timeline/Timeline.module.scss","EventsList/EventList.module.scss"],"names":["module","exports","mySanityClient","sanityClient","projectId","dataset","SourceList","sources","length","className","styles","map","source","_key","blank","title","url","key","href","target","dayjs","extend","advancedFormat","relativeTime","builder","imageUrlBuilder","EventList","events","serializers","dayZero","types","figure","props","node","alt","caption","image","src","fit","event","id","_id","heading","details","date","authorName","dateObj","event__heading","event__meta","format","undefined","blocks","TimeUnitList","getMonthName","month","eventsSorted","grouppedEventsObj","reduce","groups","split","year","yearMonth","push","grouppedEventsArr","group","label","sortEvents","time_units","unit","time_unit","uuidv4","time_unit__label","Timeline","tm","tm__line","fetchAllQuery","App","query","useState","setEvents","loading","setLoading","useEffect","a","fetch","response","fetchEvents","useEvents","container","icon","faSpinner","size","fixedWidth","pulse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.34b748d7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"time_units\":\"TimeUnitList_time_units__3tjrY\",\"time_unit\":\"TimeUnitList_time_unit__38ttW\",\"time_unit__label\":\"TimeUnitList_time_unit__label__2cmiX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__eSJ6i\",\"loading\":\"App_loading__3Rsj5\"};","import sanityClient from '@sanity/client';\n\nconst mySanityClient = sanityClient({\n    projectId: `he2py649`,\n    dataset:   `production`,\n});\n\nexport default mySanityClient;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './SourceList.module.scss';\n\nfunction SourceList({ sources }) {\n    return (\n        <>\n        <p>{sources.length > 1 ? `Sources:` : `Source:`}</p>\n        <ul className={styles.sources}>\n            {\n                sources.map( source => {\n                    const {_key, blank, title, url} = source;\n                    \n                    return (\n                    <li key={_key} className={styles.source}>\n                        <a href={url} title={title} target={!!blank ? `_blank` : `_self`}>{!!title ? title : url}</a>\n                    </li>\n                )})\n            }\n        </ul>\n        </>\n    );\n}\n\nSourceList.propTypes = {\n    sources: PropTypes.arrayOf(\n        PropTypes.shape({\n            _key:   PropTypes.string.isRequired,\n            blank:  PropTypes.bool,\n            title:  PropTypes.string,\n            url:    PropTypes.string.isRequired,\n        })\n    ).isRequired,\n};\n\nexport default SourceList;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport BlockContent from '@sanity/block-content-to-react';\nimport mySanityClient from '../sanityClient';\nimport imageUrlBuilder from '@sanity/image-url';\nimport SourceList from '../SourceList/SourceList';\nimport dayjs from 'dayjs';\nimport advancedFormat from 'dayjs/plugin/advancedFormat';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport styles from './EventList.module.scss';\ndayjs.extend(advancedFormat);\ndayjs.extend(relativeTime);\n\n// @todo change the way to display details as formatted text @see https://www.sanity.io/docs/block-content\n// @todo add author to meta data\n// @todo add source link to meta data\n\nconst builder = imageUrlBuilder(mySanityClient);\n\nfunction urlFor(source) {\n    return builder.image(source);\n}\n\nfunction EventList({events, dayZero}) {\n    const serializers = {\n        types: {\n            figure: props => {\n                const {node: {alt, caption, image}} = props;\n                return (\n                    <>\n                    <figure>\n                        <img \n                            src={urlFor(image)\n                                // .width(300)\n                                // .height(250)\n                                .fit(`clip`)\n                                .url()\n                            } \n                            alt={alt} />\n                        <figcaption>{caption}</figcaption>\n                    </figure>\n                    </>\n                );\n            }\n        }\n    }\n\n    return (\n        <ul className={styles.events}>\n            {\n                events.map( event => {\n                    const {\n                        _id: id, \n                        heading, \n                        details, \n                        date, \n                        authorName,\n                        source,\n                    } = event;\n                    const dateObj = dayjs(date);\n\n                    return (\n                        <li className={styles.event} key={id}>\n                            <h2 className={styles.event__heading}>{ heading }</h2>\n                            <div className={styles.event__meta}>\n                                {dateObj.format(`MMMM Do, YYYY`)} \n                            </div>\n                            { undefined !== details && ( <BlockContent blocks={details} serializers={serializers} /> )}\n                            <div className={styles.event__meta}>\n                                { !!source && source.length > 0 && (\n                                    <SourceList sources={source} />\n                                )}\n                                <p>Added by: {undefined !== authorName ? authorName : `anonymous`}</p>\n                            </div>\n                        </li>\n                    );\n                })\n            }\n        </ul>\n    );\n}\nEventList.propTypes = {\n    events: PropTypes.arrayOf(\n        PropTypes.shape({\n            _id: PropTypes.string.isRequired,\n            date: PropTypes.string.isRequired,\n            heading: PropTypes.string.isRequired,\n            details: PropTypes.array,\n            authorName: PropTypes.string,\n        })\n    ).isRequired,\n    dayZero: PropTypes.string.isRequired\n};\n\nexport default EventList;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport EventsList from '../EventsList/EventList';\nimport styles from './TimeUnitList.module.scss';\n\nfunction TimeUnitList({events}) {\n\n    // @todo add test for the sortEvents()\n    function sortEvents(events) {\n        const grouppedEventsObj = events.reduce( (groups, event) => {\n            const date = event.date.split('T')[0];\n            const year = date.split('-')[0];\n            const month = date.split('-')[1];\n            const yearMonth = `${year}-${month}`;\n    \n            if( !groups[yearMonth] ) {\n                groups[yearMonth] = [];\n            }\n            groups[yearMonth].push(event);\n    \n            return groups;\n        }, {});\n    \n        const grouppedEventsArr = [];\n        for ( const yearMonth in grouppedEventsObj ) {\n            const date = yearMonth.split(`-`);\n            const label = {\n                month: getMonthName(date[1]),\n                year: date[0]\n            }\n            const group = {\n                label,\n                events: grouppedEventsObj[yearMonth]\n            };\n            grouppedEventsArr.push(group);\n        }\n        return grouppedEventsArr;\n    }\n\n    // @todo add test for the getMonthName() - probably goodone to start with\n    function getMonthName(month) {\n        const monthsOfYear = [\n            `January`,\n            `February`,\n            `March`,\n            `April`,\n            `May`,\n            `June`,\n            `July`,\n            `August`,\n            `September`,\n            `October`,\n            `November`,\n            `December`\n        ];\n        return `${monthsOfYear[month-1]}`;\n    }\n\n    const eventsSorted = sortEvents( events );\n    const dayZero = eventsSorted[0].events[0].date;\n\n    return (\n        <ul className={styles.time_units}>\n            {                \n                eventsSorted.map( unit => {\n                    const {label, events} = unit;\n                    return (\n                        <li className={styles.time_unit} key={uuidv4()}>\n                            <div className={styles.time_unit__label}>{ label.month }<span>{ label.year }</span></div>\n                            <EventsList events={ events } dayZero={dayZero} />\n                        </li>\n                    );\n                })\n            }\n        </ul>\n    );\n}\nTimeUnitList.propTypes = {\n    events: PropTypes.arrayOf(\n        PropTypes.shape({\n          _id: PropTypes.string.isRequired,\n          date: PropTypes.string.isRequired,\n          heading: PropTypes.string.isRequired,\n          details: PropTypes.array,\n        })\n      ).isRequired\n};\n\nexport default TimeUnitList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TimeUnitList from '../TimelineUnitList/TimeUnitList';\nimport styles from './Timeline.module.scss';\n\nfunction Timeline({ events }) {\n  return (\n    <div className={styles.tm}>\n      <div className={styles.tm__line}></div>\n      <TimeUnitList events={ events } />\n    </div>\n  );\n}\nTimeline.propTypes = {\n  events: PropTypes.arrayOf(\n    PropTypes.shape({\n      _id:     PropTypes.string.isRequired,\n      date:    PropTypes.string.isRequired,\n      heading: PropTypes.string.isRequired,\n      details: PropTypes.array,\n    })\n  ).isRequired\n};\n\nexport default Timeline;","// @todo add details to the query\nexport const fetchAllQuery = `* [ _type == 'event' ] | order(date asc, heading) {\n  _id,\n  heading,\n  date,\n  details,\n  source,\n  \"authorName\":author->name\n}`;","import React from 'react';\nimport Timeline from './Timeline/Timeline';\nimport { useEvents } from './API/Fetch';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/pro-duotone-svg-icons'\nimport styles from './App.module.scss';\n\nfunction App() {\n  const [events, loading] = useEvents();\n  return (\n    <div className={styles.App}>\n      <div className={styles.container}>\n\n        { loading ? (\n          // @todo Add spinner\n          <div className={styles.loading}>\n              <h2>Loading data…</h2>\n              <FontAwesomeIcon icon={ faSpinner } size='4x' fixedWidth pulse />\n              <p>Thank you for exercising your patience…</p>\n          </div>\n        ) : (\n          <Timeline events={events} />\n        ) }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { useState, useEffect } from 'react';\nimport mySanityClient from '../sanityClient';\nimport { fetchAllQuery } from './Queries';\n\nfunction useEvents(query = fetchAllQuery) {\n    const [events, setEvents] = useState([]);\n    const [loading, setLoading] = useState(true);\n    \n    useEffect( () => {\n\n        async function fetchEvents() {\n            const response = await mySanityClient.fetch( query )\n    \n            setEvents(response);\n            setLoading(false);\n        }\n\n        fetchEvents();\n    }, [query]);\n\n    return [events, loading];\n}\nexport { useEvents };","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sources\":\"SourceList_sources__1c-JD\",\"source\":\"SourceList_source__3usBi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tm\":\"Timeline_tm__W29v7\",\"tm__line\":\"Timeline_tm__line__GIT3U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"events\":\"EventList_events__3mZcH\",\"event\":\"EventList_event__dA5CI\",\"microEvent\":\"EventList_microEvent__2Jugq\",\"event__heading\":\"EventList_event__heading__39BsR\",\"event__meta\":\"EventList_event__meta__1dxJN\"};"],"sourceRoot":""}